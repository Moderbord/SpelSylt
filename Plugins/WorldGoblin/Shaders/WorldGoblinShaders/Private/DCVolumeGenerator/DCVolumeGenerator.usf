#include "/Engine/Generated/Material.ush"
#include "/Engine/Public/Platform.ush"

uint VolumeSize;
float VolumeScale;
float NormalSampleStep;
float3 Position;

RWBuffer<float4> SDF;

uint GetVolumeIndex(uint3 id)
{
    return ((id.z * VolumeSize) + id.y) * VolumeSize + id.x;
}

float GetDensity(float3 pos)
{
    FMaterialPixelParameters MaterialParameters = MakeInitializedMaterialPixelParameters();
	
    MaterialParameters.VertexColor = half4(1, 1, 0, 1);
	
    FPixelMaterialInputs PixelMaterialInputs = (FPixelMaterialInputs)0;

	// This is the call to the material graph
    CalcMaterialParameters(MaterialParameters, PixelMaterialInputs, float4(pos, 1), true);

    float res = 0;

#ifdef NUM_MATERIAL_OUTPUTS_WORLDGOBLINDENSITYOUTPUT
#if NUM_MATERIAL_OUTPUTS_WORLDGOBLINDENSITYOUTPUT > 0
		res = WorldGoblinDensityOutput0(MaterialParameters);
#endif
#endif
	
    return res;
}

float3 CalculateNormal(float3 pos, float epsilon = 0.0001)
{
    const float2 k = float2(1, -1);
    return normalize(
		k.xyy * GetDensity(pos + k.xyy * epsilon) +
		k.yyx * GetDensity(pos + k.yyx * epsilon) +
		k.yxy * GetDensity(pos + k.yxy * epsilon) +
		k.xxx * GetDensity(pos + k.xxx * epsilon));
}

[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void DCVolumeGenerator(
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint GroupIndex : SV_GroupIndex )
{
    uint3 id = DispatchThreadId;
	
    float3 VoxelPosition = Position + float3(id) * VolumeScale;
	float4 SvPosition = float4(VoxelPosition, 0);
	
    ResolvedView = ResolveView();
	
    uint idx = GetVolumeIndex(DispatchThreadId);
	
    float d = GetDensity(VoxelPosition) / VolumeScale;
    float3 n = CalculateNormal(VoxelPosition, NormalSampleStep);
	
    SDF[idx] = float4(n, d);

	// You can also access custom output nodes via their respective names
	// e.g. GetMyCustomMaterialOutput0(MaterialParameters)
	// See: Custom node example
}